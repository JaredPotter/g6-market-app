{"version":3,"sources":["components/Dollar.tsx","components/Product.tsx","components/Select.tsx","components/Search.tsx","components/Cart.tsx","App.tsx","index.tsx"],"names":["Dollar","props","react","num","isNaN","toFixed","format","value","Product","handleClickChangeQuantity","quantity","item","title","_this","price","onCartUpdate","handleChange","e","parseInt","target","_this2","this","onClick","type","onChange","className","data-tid","src","imageUrl","alt","components_Dollar","addToCartOrQuantity","React","Select","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","onSelectChange","options","map","opt","key","label","currentValue","Search","searchString","test","suggestionList","length","minimumSearchLength","thisRef","assertThisInitialized","inputSet","filter","option","optionValue","searchFieldName","RegExp","toLowerCase","currentResultSet","some","setState","bind","formatSuggestionList","results","forEach","push","placeholder","Cart","items","reduce","accum","handleRemoveFromCart","subtotal","rate","onRemoveFromCart","renderLineItem","subtotalAmount","taxRate","taxAmount","totalAmount","App","updateCategoryFilter","handleChangeSortBy","currentCategoryValue","currentSortByValue","categories","products","filteredProductList","cartItems","updateFilteredProducts","category","sortBy","undefined","existing","find","i","newCartItems","slice","itemsClone","product","sort","a","b","element","productList","Product_Product","url","href","Search_Search","Select_Select","Cart_Cart","ReactDOM","render","react_default","createElement","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.f67e4750.chunk.js","sourcesContent":["import * as React from \"react\";\nexport interface DollarProps { value: number; }\n\nconst Dollar = (props: DollarProps) => {\n    return (\n        <div>${ format(props.value) }</div>\n    );\n};\n\nfunction format(num : number) {\n    if(!isNaN(num)) {\n        return num.toFixed(2);\n    }\n  }\n\nexport default Dollar;","import * as React from \"react\";\nimport \"./Product.scss\";\nimport Dollar from \"./Dollar\";\n\nexport interface ProductProps {\n    title: string;\n    imageUrl: string;\n    price: number;\n    category: string;\n    onCartUpdate: Function;\n    quantity: number;\n};\n\nexport default class Product extends React.Component<ProductProps, {}> {\n  handleClickChangeQuantity = (quantity : number) => {\n    const item = {\n      title: this.props.title,\n      price: this.props.price,\n      quantity: quantity\n    };  \n\n    this.props.onCartUpdate(item);\n  };\n\n\n  handleChange = (e : any) => {\n    const value = parseInt(e.target.value);\n\n    if(!isNaN(value)) {\n      const item = {\n        title: this.props.title,\n        price: this.props.price,\n        quantity: value\n      };  \n  \n      this.props.onCartUpdate(item);      \n    }\n  };\n\n  // addToCartOrQuantity = (quantity : number) => {\n  addToCartOrQuantity(quantity : number) {\n    if(quantity > 0) {\n      return (\n        <div>\n          <button onClick={ () => this.handleClickChangeQuantity(this.props.quantity - 1) }>-</button>\n          {/* <div>{ quantity }</div> */}\n          <input type=\"text\" value={ quantity } onChange={ this.handleChange }/>\n          <button onClick={ () => this.handleClickChangeQuantity(this.props.quantity + 1) }>+</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <button onClick={ () => this.handleClickChangeQuantity(1) } className=\"add-to-cart-button\">Add to Cart</button>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"product-container\" data-tid=\"container\">\n          <div className=\"img\">\n            <img src={ this.props.imageUrl } alt={ this.props.title }/>\n          </div>\n          <div className=\"title\">{ this.props.title }</div>\n          <div className=\"bottom\">\n            <Dollar value={ this.props.price }/>\n            { this.addToCartOrQuantity(this.props.quantity) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport './Product.scss';\n\nexport interface SelectProps {\n  currentValue: string;\n  options: Array<any>;\n  onSelectChange: any;\n};\n\nexport interface SelectState {\n  onSelectChange: any;\n};\n\nexport default class Select extends React.Component<SelectProps, SelectState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      onSelectChange: props.onSelectChange,\n    };\n  }\n\n  handleChange = (e: any) => {\n    const value = e.target.value;\n\n    this.state.onSelectChange(value);\n  }\n\n  render() {\n    let options = this.props.options.map((opt) => {\n      return (\n        <option key={opt.value} value={opt.value}>{opt.label}</option>\n      );\n    });\n\n    return (\n      <div>\n        {/* <div>Current Value: { this.props.currentValue }</div> */}\n        <select value={this.props.currentValue} onChange={this.handleChange}>\n          {options}\n        </select>\n      </div>\n    );\n  }\n};\n\n","import * as React from \"react\";\nimport './Search.scss';\n\nexport interface SearchProps { \n    inputSet: Array<any>;\n    searchFieldName: string;\n    // currentQueryValue: string;\n    minimumSearchLength: number;\n}\n\nexport interface SearchState {\n    suggestionList: Array<any>;\n    currentResultSet: Array<any>;\n}\n\nexport default class Search extends React.Component<SearchProps, SearchState> {   \n    constructor(props : SearchProps) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.formatSuggestionList = this.formatSuggestionList.bind(this);\n        this.state = {\n            suggestionList: [],\n            currentResultSet: []\n        };\n    }\n    \n    handleChange = (e : any) => {\n        const searchString = e.target.value;\n    \n        // Valid if alpha or approved special character.            \n        if(!(/\\w+/.test(searchString))) {\n            this.setState({\n                suggestionList: []\n            });\n\n            return;\n        }\n\n        let suggestionList = null;\n\n        if(searchString.length >= this.props.minimumSearchLength) {\n            let thisRef = this;\n            suggestionList = this.props.inputSet.filter((option) => {\n                let optionValue = option[thisRef.props.searchFieldName];\n\n                if(\n                    (\n                        (new RegExp('^' + searchString.toLowerCase())).test(optionValue.toLowerCase()) // Regex search on whole list of partial match.\n                        ||\n                        (new RegExp('^.*' + searchString.toLowerCase() + '.*$')).test(optionValue.toLowerCase())\n                    )\n                    &&\n                    !this.state.currentResultSet.some(item => item === option) // Excludes words already on the list.\n                    //^this line is still likely broken.\n                )\n                {\n                    return true\n                }\n            });\n            \n        }\n        else {\n            suggestionList = [];\n        }        \n\n        this.setState({\n            suggestionList: suggestionList,\n        });\n      }\n\n    formatSuggestionList(suggestionList : Array<any>) {\n        const results: any[] = [];\n\n        suggestionList.forEach(item => {\n            let value = item[this.props.searchFieldName];\n            results.push(value);\n        });\n\n        return results;\n    }\n\n    render() {\n        if(this.state.suggestionList.length > 1) {\n            return (\n                <div className=\"search-container\">\n                    <input type=\"text\" onChange={ this.handleChange } placeholder=\"Search...\"/>\n                    <ul>\n                        <li>{ this.formatSuggestionList(this.state.suggestionList) }</li>\n                    </ul>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className=\"search-container\">\n                    <input type=\"text\" onChange={ this.handleChange } placeholder=\"Search...\"/>\n                </div>\n            );\n        }\n    };\n};","import * as React from \"react\";\nimport './Cart.scss';\nimport Dollar from './Dollar';\n\nexport interface CartProps { \n    items: Array<any>;\n    taxRate: number;\n    onRemoveFromCart: Function;\n}\n\nexport default class Cart extends React.Component<CartProps, {}> {   \n    constructor(props : CartProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    subtotalAmount(items : Array<any>) {\n        let subtotal = items.reduce((accum, item) => { return accum + item.price * item.quantity}, 0);\n\n        return subtotal;\n    }\n\n    renderLineItem(items : Array<any>) {\n        const lineItems = items.map((item) => {\n            return (\n                <tr key={ item.title }>\n                    <td>\n                        { item.title }\n                    </td>\n                    <td className=\"quantity\">\n                        { item.quantity }\n                    </td>\n                    <td>\n                        <Dollar value={ item.price }/>\n                    </td>\n                    <td onClick={ () => this.handleRemoveFromCart(item) } className=\"remove\">\n                        X\n                    </td>\n                </tr>\n            );\n        });\n\n        return lineItems;\n    };\n\n    subtotal(subtotal : number) {\n        return (\n            <tr>\n                <td>\n                    Subtotal\n                </td>\n                <td>\n                    <Dollar value={ subtotal }/>\n                </td>\n            </tr>\n        );\n    }\n\n    taxRate(rate : number) {\n        return (\n            <tr>\n                <td>Tax Rate</td>\n                <td>\n                    { rate * 100 }%\n                </td>\n            </tr>\n        );\n    };\n\n    taxAmount(rate : number, subtotal : number) {\n        return (\n            <tr>\n                <td>Tax Amount</td>\n                <td>\n                    <Dollar value={ rate * subtotal }/>\n                </td>\n            </tr>\n        );\n    };\n\n    totalAmount(rate : number, subtotal : number) {\n        return (\n            <tr>\n                <td><strong>Total</strong></td>\n                <td>\n                    <strong><Dollar value={ (rate * subtotal) + subtotal }/></strong>\n                </td>\n            </tr>            \n        );\n    };\n\n    handleRemoveFromCart(item : any) {\n        this.props.onRemoveFromCart(item);\n    }\n\n    render() {\n        return (\n            <div className=\"cart-container\">\n                <h3>Cart</h3>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Item</th>\n                            <th>Quantity</th>\n                            <th>Price</th>\n                            <th>Remove</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { this.renderLineItem(this.props.items ) }\n                    </tbody>\n                </table>\n                <table>\n                    <tbody>\n                        { this.subtotal(this.subtotalAmount(this.props.items)) }\n                        { this.taxRate(this.props.taxRate) }\n                        { this.taxAmount(this.props.taxRate, this.subtotalAmount(this.props.items)) }\n                        { this.totalAmount(this.props.taxRate, this.subtotalAmount(this.props.items)) }\n                    </tbody>\n                </table>\n            </div>\n        );\n    };\n};","import * as React from 'react';\nimport './App.scss';\nimport Product from './components/Product';\nimport Select from './components/Select';\nimport Search from './components/Search';\nimport Cart from './components/Cart';\nimport categories from './categories.json';\nimport products from './products.json';\n\n// interface Product {\n//   title: string;\n//   price: number;\n//   quantity: number;\n// }\n\nexport interface AppState {\n  currentCategoryValue: string;\n  currentSortByValue: string;\n  categories: Array<any>;\n  products: Array<any>;\n  filteredProductList: Array<any>;\n  cartItems: Array<any>;\n};\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props : any) {\n    super(props);\n\n    this.updateCategoryFilter = this.updateCategoryFilter.bind(this);\n    this.handleChangeSortBy = this.handleChangeSortBy.bind(this);\n    this.state = {\n      currentCategoryValue: 'all',\n      currentSortByValue: 'name',\n      categories: categories,\n      products: products,\n      filteredProductList: [],\n      cartItems: [\n        // {\n        //   title: 'Bananas',\n        //   price: 0.99,\n        //   quantity: 3\n        // }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    // const filteredProductList = this.state.products\n    // const payload = {\n    //   category: this.state.currentCategoryValue,\n    //   sortBy: this.state.currentSortByValue,\n    // };  \n\n    this.updateFilteredProducts();\n  }\n\n  updateCategoryFilter(category : string) {\n    this.updateFilteredProducts(category);\n  };\n\n  handleChangeSortBy(sortBy : string) {\n    this.updateFilteredProducts(undefined, sortBy);\n  }\n\n  onCartUpdate(item : any) {\n    const existing = this.state.cartItems.find((i) => { \n      return i.title === item.title\n    });\n\n    let newCartItems = [];\n    \n    if(existing) {\n      // if(item.quantity === 0 ) {\n\n      // }\n\n      existing.quantity = item.quantity;\n      \n      newCartItems = this.state.cartItems.slice(0)\n    }\n    else {\n      // Add new item to cart.\n      const itemsClone =  this.state.cartItems.slice(0);\n      item.quantity = 1;\n\n      itemsClone.push(item);\n      newCartItems = itemsClone;\n    }\n\n    this.updateFilteredProducts(undefined, undefined, newCartItems);    \n  };\n\n  onRemoveFromCart(item : any) {\n    const cartItems = this.state.cartItems.slice(0);\n    const existing = cartItems.slice(0).find(e => e.title === item.title);\n\n    if(existing) {\n      existing.quantity = 0;\n    }\n    \n    this.updateFilteredProducts(undefined, undefined, cartItems); \n  }\n\n  updateFilteredProducts(category? : string, sortBy? : string, cartItems? : any[]) {\n    let filteredProductList = [] as any[];\n\n    // Apply Category.\n    category = category ? category : this.state.currentCategoryValue;\n    sortBy = sortBy ? sortBy : this.state.currentSortByValue;\n    cartItems = cartItems ? cartItems : this.state.cartItems;\n\n    if(category !== 'all') {\n      filteredProductList = this.state.products.filter((product) => {\n        return product.category === category;\n      });\n    }\n    else {\n      filteredProductList = this.state.products.slice(0);\n    }\n\n    // Apply Sort by.\n    if(sortBy === 'name') {\n      filteredProductList = filteredProductList.sort((a, b) => {\n        if (a.title < b.title)\n          return -1;\n        if (a.title > b.title)\n          return 1;\n        return 0;\n      });\n    }\n    else if(sortBy === 'price') {\n      filteredProductList = filteredProductList.sort((a, b) => {\n        return a.price - b.price;\n      });\n    }\n\n    // Match cartItems and filteredProduct list.\n    cartItems.forEach((item) => {\n      const element = filteredProductList.find(e => e.title === item.title);\n\n      if(element) {\n        element.quantity = item.quantity;\n      }\n    });\n    \n    // Remove empty elements from cart.\n    const newCartItems = cartItems.filter(item => item.quantity > 0);\n\n    this.setState({\n      filteredProductList: filteredProductList,\n      cartItems: newCartItems,\n      currentCategoryValue: category,\n      currentSortByValue: sortBy,\n    })\n  }\n\n  render() {  \n    const filteredProductList = this.state.filteredProductList;\n\n    const productList = filteredProductList.map((item) => {\n      return (\n        <Product\n          key={ item.title }\n          title={ item.title }\n          imageUrl={ 'thumbnails/' + item.url }\n          price={ item.price }\n          category={ item.category }\n          onCartUpdate={ (item : any) => this.onCartUpdate(item)}\n          quantity={ item.quantity }\n        />\n      )\n    });\n\n    return (\n      <div className=\"app\">\n        <div className=\"top-bar\">\n          <a href=\"/\">\n            <img src=\"/logo_title.png\" alt=\"G6 Market\"/>\n          </a>\n          <div className=\"search\">\n            <Search \n              inputSet={ this.state.products }\n              searchFieldName={ 'title' }\n              minimumSearchLength={ 2 }\n            />\n          </div>\n          <div className=\"top-subtotal-cart-count\">\n            asd\n          </div>\n        </div>\n        <div className=\"left\">\n          <div className=\"filters\">\n            <div>Sort By:\n              <Select \n                currentValue={ this.state.currentSortByValue }\n                options={ [{value: 'name', label: 'Name' }, {value: 'price', label: 'Price'}] }\n                onSelectChange={ this.handleChangeSortBy }\n              />              \n            </div>\n            <div>\n              Category:\n              <Select \n                currentValue={ this.state.currentCategoryValue }\n                options={ this.state.categories }\n                onSelectChange={ this.updateCategoryFilter }\n              />\n            </div>\n\n          </div>\n          <div className=\"products\">\n            { productList }\n          </div>\n        </div>\n        <div className=\"right\">\n          <Cart taxRate={ 0.05 } items={ this.state.cartItems } onRemoveFromCart={ (item : any) => this.onRemoveFromCart(item) }/>\n        </div>\n      </div>\n    );\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}