{"version":3,"sources":["components/Dollar.tsx","components/Product.tsx","components/Select.tsx","components/Search.tsx","components/Cart.tsx","App.tsx","index.tsx"],"names":["Dollar","props","react","num","isNaN","toFixed","format","value","Product","handleClickChangeQuantity","quantity","item","title","_this","price","onCartUpdate","handleChange","e","parseInt","target","_this2","this","className","onClick","type","onChange","data-tid","src","imageUrl","alt","components_Dollar","addToCartOrQuantity","React","Select","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","onSelectChange","options","map","opt","key","label","currentValue","Search","searchString","toLowerCase","suggestionList","length","minimumSearchLength","inputSet","filter","option","optionValue","searchFieldName","RegExp","test","setState","currentQueryValue","handleClick","index","selected","onQueryChange","handleMouseOver","handleKeyDown","bind","assertThisInitialized","formatSuggestionList","clear","currentResultSet","onMouseEnter","placeholder","onKeyDown","Cart","items","reduce","accum","handleRemoveFromCart","subtotal","rate","onRemoveFromCart","renderLineItem","subtotalAmount","taxRate","taxAmount","totalAmount","App","updateCategoryFilter","handleChangeSortBy","getSubtotal","getCartCount","currentCategoryValue","currentSortByValue","currentSearchQueryValue","categories","products","filteredProductList","cartItems","updateFilteredProducts","category","sortBy","undefined","existing","find","i","newCartItems","slice","itemsClone","push","query","product","sort","a","b","forEach","element","total","cartCount","productList","Product_Product","url","href","Search_Search","Select_Select","Cart_Cart","ReactDOM","render","react_default","createElement","App_App","document","getElementById"],"mappings":"slTAeeA,MAZA,SAACC,GACZ,OACIC,EAAA,8BAIR,SAAgBC,GACZ,IAAIC,MAAMD,GACN,OAAOA,EAAIE,QAAQ,GANVC,CAAOL,EAAMM,SCQTC,6MACnBC,0BAA4B,SAACC,GAC3B,IAAMC,EAAO,CACXC,MAAOC,EAAKZ,MAAMW,MAClBE,MAAOD,EAAKZ,MAAMa,MAClBJ,SAAUA,GAGZG,EAAKZ,MAAMc,aAAaJ,MAI1BK,aAAe,SAACC,GACd,IAAMV,EAAQW,SAASD,EAAEE,OAAOZ,OAEhC,IAAIH,MAAMG,GAAQ,CAChB,IAAMI,EAAO,CACXC,MAAOC,EAAKZ,MAAMW,MAClBE,MAAOD,EAAKZ,MAAMa,MAClBJ,SAAUH,GAGZM,EAAKZ,MAAMc,aAAaJ,wFAKRD,GAAmB,IAAAU,EAAAC,KACrC,OAAGX,EAAW,EAEVR,EAAA,qBAAKoB,UAAU,YACbpB,EAAA,wBAAQoB,UAAU,kBAAkBC,QAAU,kBAAMH,EAAKX,0BAA0BW,EAAKnB,MAAMS,SAAW,KAAzG,KACAR,EAAA,uBAAOoB,UAAU,kBAAkBE,KAAK,OAAOjB,MAAQG,EAAWe,SAAWJ,KAAKL,eAClFd,EAAA,wBAAQoB,UAAU,kBAAkBC,QAAU,kBAAMH,EAAKX,0BAA0BW,EAAKnB,MAAMS,SAAW,KAAzG,MAMFR,EAAA,wBAAQqB,QAAU,kBAAMH,EAAKX,0BAA0B,IAAKa,UAAU,sBAAtE,gDAMJ,OACEpB,EAAA,yBACEA,EAAA,qBAAKoB,UAAU,oBAAoBI,WAAS,aAC1CxB,EAAA,qBAAKoB,UAAU,OACbpB,EAAA,qBAAKyB,IAAMN,KAAKpB,MAAM2B,SAAWC,IAAMR,KAAKpB,MAAMW,SAEpDV,EAAA,qBAAKoB,UAAU,SACbpB,EAAA,cAAC4B,EAAD,CAAQvB,MAAQc,KAAKpB,MAAMa,SAE7BZ,EAAA,qBAAKoB,UAAU,SAAUD,KAAKpB,MAAMW,OACpCV,EAAA,qBAAKoB,UAAU,UACXD,KAAKU,oBAAoBV,KAAKpB,MAAMS,oBAxDbsB,aCAhBC,cACnB,SAAAA,EAAYhC,GAAY,IAAAY,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAAb,KAAAY,IACtBpB,EAAAqB,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjB,KAAMpB,KAORe,aAAe,SAACC,GACd,IAAMV,EAAQU,EAAEE,OAAOZ,MAEvBM,EAAK0B,MAAMC,eAAejC,IAR1BM,EAAK0B,MAAQ,CACXC,eAAgBvC,EAAMuC,gBAJF3B,wEAetB,IAAI4B,EAAUpB,KAAKpB,MAAMwC,QAAQC,IAAI,SAACC,GACpC,OACEzC,EAAA,wBAAQ0C,IAAKD,EAAIpC,MAAOA,MAAOoC,EAAIpC,OAAQoC,EAAIE,SAInD,OACE3C,EAAA,yBAEEA,EAAA,wBAAQK,MAAOc,KAAKpB,MAAM6C,aAAcrB,SAAUJ,KAAKL,cACpDyB,WA1ByBT,aCIfe,qBACjB,SAAAA,EAAY9C,GAAqB,IAAAY,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAAb,KAAA0B,IAC7BlC,EAAAqB,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAa,GAAAT,KAAAjB,KAAMpB,KAgBVe,aAAe,SAACC,GACZ,IAAM+B,EAAe/B,EAAEE,OAAOZ,MAAM0C,cAChCC,EAAiB,GAElBF,EAAaG,QAAUtC,EAAKZ,MAAMmD,sBACjCF,EAAiBrC,EAAKZ,MAAMoD,SAASC,OAAO,SAACC,GACzC,IAAIC,EAAcD,EAAO1C,EAAKZ,MAAMwD,iBAAiBR,cAErD,GAES,IAAIS,OAAO,IAAMV,GAAeW,KAAKH,IAErC,IAAIE,OAAO,MAAQV,EAAe,OAAQW,KAAKH,GAOpD,OAAO,KAKnB3C,EAAK+C,SAAS,CACVV,eAAgBA,EAChBW,kBAAmBb,KA3CMnC,EA+CjCiD,YAAc,SAACC,GACX,IAAMxD,EAAQM,EAAK0B,MAAMW,eAAea,GAAOnD,MAE/CC,EAAK+C,SAAS,CACVV,eAAgB,GAChBc,UAAW,EACXH,kBAAmBtD,IAGvBM,EAAKZ,MAAMgE,cAAc1D,IAxDIM,EA2DjCqD,gBAAkB,SAACH,GACflD,EAAK+C,SAAS,CACVI,SAAUD,KA7DelD,EAiEjCsD,cAAgB,SAAClD,GACb,GAAa,UAAVA,EAAE2B,IAAiB,CAClB,IAAIrC,EAAQ,GAGRA,GADwB,IAAzBM,EAAK0B,MAAMyB,SACFnD,EAAK0B,MAAMW,eAAerC,EAAK0B,MAAMyB,UAGrCnD,EAAK0B,MAAMsB,kBAEvBhD,EAAKZ,MAAMgE,cAAc1D,GAEzBM,EAAK+C,SAAS,CACVV,eAAgB,GAChBc,UAAW,MA5EnBnD,EAAKG,aAAeH,EAAKG,aAAaoD,KAAlBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KACpBA,EAAKyD,qBAAuBzD,EAAKyD,qBAAqBF,KAA1BlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KAC5BA,EAAKqD,gBAAkBrD,EAAKqD,gBAAgBE,KAArBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KACvBA,EAAKsD,cAAgBtD,EAAKsD,cAAcC,KAAnBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KACrBA,EAAK0D,MAAQ1D,EAAK0D,MAAMH,KAAXlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KAEbA,EAAK0B,MAAQ,CACTW,eAAgB,GAChBsB,iBAAkB,GAClBR,UAAW,EACXH,kBAAmB,IAbMhD,uEAqF7BQ,KAAKpB,MAAMgE,cAAc,IACzB5C,KAAKuC,SAAS,CACVC,kBAAmB,GACnBX,eAAgB,GAChBc,UAAW,iDAIEd,GAA6B,IAAA9B,EAAAC,KAe9C,OAda6B,EAAeR,IAAI,SAAC/B,EAAMoD,GACnC,OACI7D,EAAA,qBACI0C,IAAMjC,EAAKS,EAAKnB,MAAMwD,iBACtBnC,UAAW,oBAAsByC,IAAU3C,EAAKmB,MAAMyB,SAAW,WAAa,IAC9EzC,QAAU,kBAAMH,EAAK0C,YAAYC,IACjCU,aAAe,kBAAMrD,EAAK8C,gBAAgBH,KAGxCpD,EAAKS,EAAKnB,MAAMwD,qDAS9B,OAAGpC,KAAKkB,MAAMW,eAAeC,OAAS,EAE9BjD,EAAA,qBAAKoB,UAAU,oBACXpB,EAAA,uBACIsB,KAAK,OACLC,SAAWJ,KAAKL,aAChBT,MAAQc,KAAKkB,MAAMsB,kBACnBa,YAAY,YACZC,UAAYtD,KAAK8C,gBAErBjE,EAAA,qBAAKyB,IAAI,aAAaE,IAAI,iBAC1B3B,EAAA,qBAAKoB,UAAU,mBACTD,KAAKiD,qBAAqBjD,KAAKkB,MAAMW,kBAO/ChD,EAAA,qBAAKoB,UAAU,oBACXpB,EAAA,uBACIsB,KAAK,OACLC,SAAWJ,KAAKL,aAChBT,MAAQc,KAAKkB,MAAMsB,kBACnBa,YAAY,YACZC,UAAYtD,KAAK8C,gBAErBjE,EAAA,qBAAKyB,IAAI,aAAaE,IAAI,eAAeN,QAAUF,KAAKkD,gBA5IxCvC,cCPf4C,qBACjB,SAAAA,EAAY3E,GAAmB,IAAAY,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAAb,KAAAuD,IAC3B/D,EAAAqB,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAA0C,GAAAtC,KAAAjB,KAAMpB,KAEDsC,MAAQ,GAHc1B,8EAMhBgE,GAGX,OAFeA,EAAMC,OAAO,SAACC,EAAOpE,GAAW,OAAOoE,EAAQpE,EAAKG,MAAQH,EAAKD,UAAW,0CAKhFmE,GAAoB,IAAAzD,EAAAC,KAoB/B,OAnBkBwD,EAAMnC,IAAI,SAAC/B,GACzB,OACIT,EAAA,oBAAI0C,IAAMjC,EAAKC,OACXV,EAAA,wBACMS,EAAKC,OAEXV,EAAA,oBAAIoB,UAAU,YACRX,EAAKD,UAEXR,EAAA,wBACIA,EAAA,cAAC4B,EAAD,CAAQvB,MAAQI,EAAKG,SAEzBZ,EAAA,oBAAIqB,QAAU,kBAAMH,EAAK4D,qBAAqBrE,IAAQW,UAAU,UAAhE,yCAUP2D,GACL,OACI/E,EAAA,wBACIA,EAAA,oCAGAA,EAAA,wBACIA,EAAA,cAAC4B,EAAD,CAAQvB,MAAQ0E,sCAMxBC,GACJ,OACIhF,EAAA,wBACIA,EAAA,oCACAA,EAAA,wBACa,IAAPgF,EADN,wCAOFA,EAAeD,GACrB,OACI/E,EAAA,wBACIA,EAAA,sCACAA,EAAA,wBACIA,EAAA,cAAC4B,EAAD,CAAQvB,MAAQ2E,EAAOD,0CAM3BC,EAAeD,GACvB,OACI/E,EAAA,wBACIA,EAAA,wBAAIA,EAAA,sCACJA,EAAA,wBACIA,EAAA,4BAAQA,EAAA,cAAC4B,EAAD,CAAQvB,MAAS2E,EAAOD,EAAYA,oDAMvCtE,GACjBU,KAAKpB,MAAMkF,iBAAiBxE,oCAI5B,OACIT,EAAA,qBAAKoB,UAAU,kBACXpB,EAAA,qBAAKyB,IAAI,oBAAoBE,IAAI,kBACjC3B,EAAA,gCACAA,EAAA,2BACIA,EAAA,2BACIA,EAAA,wBACIA,EAAA,gCACAA,EAAA,oCACAA,EAAA,iCACAA,EAAA,oCAGRA,EAAA,2BACMmB,KAAK+D,eAAe/D,KAAKpB,MAAM4E,SAGzC3E,EAAA,2BACIA,EAAA,2BACMmB,KAAK4D,SAAS5D,KAAKgE,eAAehE,KAAKpB,MAAM4E,QAC7CxD,KAAKiE,QAAQjE,KAAKpB,MAAMqF,SACxBjE,KAAKkE,UAAUlE,KAAKpB,MAAMqF,QAASjE,KAAKgE,eAAehE,KAAKpB,MAAM4E,QAClExD,KAAKmE,YAAYnE,KAAKpB,MAAMqF,QAASjE,KAAKgE,eAAehE,KAAKpB,MAAM4E,kBA7G5D7C,8BCgBbyD,cACnB,SAAAA,EAAYxF,GAAa,IAAAY,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAAb,KAAAoE,IACvB5E,EAAAqB,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAuD,GAAAnD,KAAAjB,KAAMpB,KAEDyF,qBAAuB7E,EAAK6E,qBAAqBtB,KAA1BlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KAC5BA,EAAK8E,mBAAqB9E,EAAK8E,mBAAmBvB,KAAxBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KAC1BA,EAAK+E,YAAc/E,EAAK+E,YAAYxB,KAAjBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KACnBA,EAAKgF,aAAehF,EAAKgF,aAAazB,KAAlBlC,OAAAmC,EAAA,EAAAnC,QAAAmC,EAAA,EAAAnC,CAAArB,KACpBA,EAAK0B,MAAQ,CACXuD,qBAAsB,MACtBC,mBAAoB,OACpBC,wBAAyB,GACzBC,WAAYA,EACZC,SAAUA,EACVC,oBAAqB,GACrBC,UAAW,IAdUvF,mFAyBvBQ,KAAKgF,sEAGcC,GACnBjF,KAAKgF,uBAAuBC,8CAGXC,GACjBlF,KAAKgF,4BAAuBG,EAAWD,wCAG5B5F,GACX,IAAM8F,EAAWpF,KAAKkB,MAAM6D,UAAUM,KAAK,SAACC,GAC1C,OAAOA,EAAE/F,QAAUD,EAAKC,QAGtBgG,EAAe,GAEnB,GAAGH,EACDA,EAAS/F,SAAWC,EAAKD,SACzBkG,EAAevF,KAAKkB,MAAM6D,UAAUS,MAAM,OAEvC,CAEH,IAAMC,EAAczF,KAAKkB,MAAM6D,UAAUS,MAAM,GAC/ClG,EAAKD,SAAW,EAEhBoG,EAAWC,KAAKpG,GAChBiG,EAAeE,EAAWD,MAAM,GAGlCxF,KAAKgF,4BAAuBG,OAAWA,OAAWA,EAAWI,4CAG9CjG,GACf,IAAMyF,EAAY/E,KAAKkB,MAAM6D,UAAUS,MAAM,GACvCJ,EAAWL,EAAUS,MAAM,GAAGH,KAAK,SAAAzF,GAAC,OAAIA,EAAEL,QAAUD,EAAKC,QAE5D6F,IACDA,EAAS/F,SAAW,GAGtBW,KAAKgF,4BAAuBG,OAAWA,OAAWA,EAAWJ,kDAGxCE,EAAoBC,EAAkBS,EAAiBZ,GAC5E,IAAID,EAAsB,GAG1BG,EAAWA,GAAsBjF,KAAKkB,MAAMuD,qBAC5CS,EAASA,GAAkBlF,KAAKkB,MAAMwD,mBAGpCiB,OADWR,IAAVQ,EACO3F,KAAKkB,MAAMyD,wBAGXgB,EAGVZ,EAAYA,GAAwB/E,KAAKkB,MAAM6D,UAG7CD,EADc,QAAbG,EACqBjF,KAAKkB,MAAM2D,SAAS5C,OAAO,SAAC2D,GAChD,OAAOA,EAAQX,WAAaA,IAIRjF,KAAKkB,MAAM2D,SAASW,MAAM,GAIpC,SAAXN,EACDJ,EAAsBA,EAAoBe,KAAK,SAACC,EAAGC,GACjD,OAAID,EAAEvG,MAAQwG,EAAExG,OACN,EACNuG,EAAEvG,MAAQwG,EAAExG,MACP,EACF,IAGQ,UAAX2F,IACNJ,EAAsBA,EAAoBe,KAAK,SAACC,EAAGC,GACjD,OAAOD,EAAErG,MAAQsG,EAAEtG,SAMpBkG,GAASA,EAAM7D,OAAS,IACzB6D,EAAQA,EAAO/D,cACfkD,EAAsBA,EAAoB7C,OAAO,SAACC,GAChD,IAAMC,EAAcD,EAAO3C,MAAMqC,cAEjC,GAES,IAAIS,OAAO,IAAMsD,GAAQrD,KAAKH,IAE9B,IAAIE,OAAO,MAAQsD,EAAQ,OAAQrD,KAAKH,GAI7C,OAAO,GAEVnC,OAIL+E,EAAUiB,QAAQ,SAAC1G,GACjB,IAAM2G,EAAUnB,EAAoBO,KAAK,SAAAzF,GAAC,OAAIA,EAAEL,QAAUD,EAAKC,QAE5D0G,IACDA,EAAQ5G,SAAWC,EAAKD,YAK5B,IAAMkG,EAAeR,EAAU9C,OAAO,SAAA3C,GAAI,OAAIA,EAAKD,SAAW,IAE9DW,KAAKuC,SAAS,CACZuC,oBAAqBA,EACrBC,UAAWQ,EACXd,qBAAsBQ,EACtBP,mBAAoBQ,EACpBP,wBAAyBgB,0CAK3B,IAAMZ,EAAY/E,KAAKkB,MAAM6D,UACzBnB,EAAW,EAMf,OAJGmB,EAAUjD,OAAS,IACpB8B,EAAWmB,EAAUtB,OAAO,SAACyC,EAAO5G,GAAR,OAAiB4G,EAAS5G,EAAKG,MAAQH,EAAKD,YAGnEuE,yCAIP,IAAMmB,EAAY/E,KAAKkB,MAAM6D,UACzBoB,EAAY,EAMhB,OAJGpB,EAAUjD,OAAS,IACpBqE,EAAYpB,EAAUtB,OAAO,SAACyC,EAAO5G,GAAR,OAAiB4G,EAAS5G,EAAKD,UAAU,IAGjE8G,wCAGKR,GACZ3F,KAAKgF,4BAAuBG,OAAWA,EAAWQ,oCAS3C,IAAA5F,EAAAC,KACD8E,EAAsB9E,KAAKkB,MAAM4D,oBAEnCsB,OAAcjB,EAqBlB,OAlBEiB,EADCtB,EAAoBhD,OAAS,EAChBgD,EAAoBzD,IAAI,SAAC/B,GACrC,OACET,EAAA,cAACwH,EAAD,CACE9E,IAAMjC,EAAKC,MACXA,MAAQD,EAAKC,MACbgB,SAAW,cAAgBjB,EAAKgH,IAChC7G,MAAQH,EAAKG,MACbwF,SAAW3F,EAAK2F,SAChBvF,aAAe,SAACJ,GAAD,OAAgBS,EAAKL,aAAaJ,IACjDD,SAAWC,EAAKD,aAMRsB,gBAAoB,MAAO,GAAI,cAI7C9B,EAAA,qBAAKoB,UAAU,OACbpB,EAAA,qBAAKoB,UAAU,WACbpB,EAAA,mBAAG0H,KAAK,KACN1H,EAAA,qBAAKyB,IAAI,iBAAiBE,IAAI,eAEhC3B,EAAA,qBAAKoB,UAAU,UACbpB,EAAA,cAAC2H,EAAD,CACExE,SAAWhC,KAAKkB,MAAM2D,SACtBzC,gBAAkB,QAClBL,oBAAsB,EACtBa,cAAgB,SAAC+C,GAAD,OAAoB5F,EAAK6C,cAAc+C,OAG3D9G,EAAA,qBAAKoB,UAAU,2BACbpB,EAAA,yBAAKA,EAAA,0CAA2BA,EAAA,cAAC4B,EAAD,CAAQvB,MAAQc,KAAKuE,iBACrD1F,EAAA,yBAAKA,EAAA,sCAAL,IAA+BmB,KAAKwE,kBAGxC3F,EAAA,qBAAKoB,UAAU,cACbpB,EAAA,yBACIA,EAAA,wCACAA,EAAA,cAAC4H,EAAD,CACEhF,aAAezB,KAAKkB,MAAMwD,mBAC1BtD,QAAU,CAAC,CAAClC,MAAO,OAAQsC,MAAO,QAAU,CAACtC,MAAO,QAASsC,MAAO,UACpEL,eAAiBnB,KAAKsE,sBAG5BzF,EAAA,yBACEA,EAAA,yCACAA,EAAA,cAAC4H,EAAD,CACEhF,aAAezB,KAAKkB,MAAMuD,qBAC1BrD,QAAUpB,KAAKkB,MAAM0D,WACrBzD,eAAiBnB,KAAKqE,yBAI5BxF,EAAA,qBAAKoB,UAAU,QACbpB,EAAA,qBAAKoB,UAAW,SAA2C,IAAhCD,KAAKkB,MAAM6D,UAAUjD,OAAe,YAAc,KAC3EjD,EAAA,qBAAKoB,UAAU,YACXmG,IAGNvH,EAAA,qBAAKoB,UAAW,UAA4C,IAAhCD,KAAKkB,MAAM6D,UAAUjD,OAAe,eAAiB,KAC/EjD,EAAA,cAAC6H,EAAD,CAAMzC,QAAU,IAAOT,MAAQxD,KAAKkB,MAAM6D,UAAYjB,iBAAmB,SAACxE,GAAD,OAAgBS,EAAK+D,iBAAiBxE,gBA7P1FqB,aCpBjCgG,IAASC,OAAOC,EAAAf,EAAAgB,cAACC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.eb6c3104.chunk.js","sourcesContent":["import * as React from \"react\";\nexport interface DollarProps { value: number; }\n\nconst Dollar = (props: DollarProps) => {\n    return (\n        <span>${ format(props.value) }</span>\n    );\n};\n\nfunction format(num : number) {\n    if(!isNaN(num)) {\n        return num.toFixed(2);\n    }\n  }\n\nexport default Dollar;","import * as React from \"react\";\nimport \"./Product.scss\";\nimport Dollar from \"./Dollar\";\n\nexport interface ProductProps {\n    title: string;\n    imageUrl: string;\n    price: number;\n    category: string;\n    onCartUpdate: Function;\n    quantity: number;\n};\n\nexport default class Product extends React.Component<ProductProps, {}> {\n  handleClickChangeQuantity = (quantity : number) => {\n    const item = {\n      title: this.props.title,\n      price: this.props.price,\n      quantity: quantity\n    };\n\n    this.props.onCartUpdate(item);\n  };\n\n\n  handleChange = (e : any) => {\n    const value = parseInt(e.target.value);\n\n    if(!isNaN(value)) {\n      const item = {\n        title: this.props.title,\n        price: this.props.price,\n        quantity: value\n      };  \n  \n      this.props.onCartUpdate(item);      \n    }\n  };\n\n  // addToCartOrQuantity = (quantity : number) => {\n  addToCartOrQuantity(quantity : number) {\n    if(quantity > 0) {\n      return (\n        <div className=\"quantity\">\n          <button className=\"quantity-button\" onClick={ () => this.handleClickChangeQuantity(this.props.quantity - 1) }>-</button>\n          <input className=\"quantity-amount\" type=\"text\" value={ quantity } onChange={ this.handleChange }/>\n          <button className=\"quantity-button\" onClick={ () => this.handleClickChangeQuantity(this.props.quantity + 1) }>+</button>\n        </div>\n      );\n    }\n    else {\n      return (\n        <button onClick={ () => this.handleClickChangeQuantity(1) } className=\"add-to-cart-button\">Add to Cart</button>\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"product-container\" data-tid=\"container\">\n          <div className=\"img\">\n            <img src={ this.props.imageUrl } alt={ this.props.title }/>\n          </div>\n          <div className=\"price\">\n            <Dollar value={ this.props.price }/>\n          </div>\n          <div className=\"title\">{ this.props.title }</div>\n          <div className=\"bottom\">\n            { this.addToCartOrQuantity(this.props.quantity) }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport './Product.scss';\n\nexport interface SelectProps {\n  currentValue: string;\n  options: Array<any>;\n  onSelectChange: any;\n};\n\nexport interface SelectState {\n  onSelectChange: any;\n};\n\nexport default class Select extends React.Component<SelectProps, SelectState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      onSelectChange: props.onSelectChange,\n    };\n  }\n\n  handleChange = (e: any) => {\n    const value = e.target.value;\n\n    this.state.onSelectChange(value);\n  }\n\n  render() {\n    let options = this.props.options.map((opt) => {\n      return (\n        <option key={opt.value} value={opt.value}>{opt.label}</option>\n      );\n    });\n\n    return (\n      <div>\n        {/* <div>Current Value: { this.props.currentValue }</div> */}\n        <select value={this.props.currentValue} onChange={this.handleChange}>\n          {options}\n        </select>\n      </div>\n    );\n  }\n};\n\n","import * as React from \"react\";\nimport './Search.scss';\n\nexport interface SearchProps { \n    inputSet: Array<any>;\n    searchFieldName: string;\n    onQueryChange: Function;\n    minimumSearchLength: number;   \n}\n\nexport interface SearchState {\n    suggestionList: Array<any>;\n    currentResultSet: Array<any>;\n    selected: number;\n    currentQueryValue: string;\n}\n\nexport default class Search extends React.Component<SearchProps, SearchState> {   \n    constructor(props : SearchProps) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n        this.formatSuggestionList = this.formatSuggestionList.bind(this);\n        this.handleMouseOver = this.handleMouseOver.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        this.clear = this.clear.bind(this);\n\n        this.state = {\n            suggestionList: [],\n            currentResultSet: [],\n            selected: -1,\n            currentQueryValue: ''\n        };\n    }\n    \n    handleChange = (e : any) => {\n        const searchString = e.target.value.toLowerCase();\n        let suggestionList = [];\n\n        if(searchString.length >= this.props.minimumSearchLength) {\n            suggestionList = this.props.inputSet.filter((option) => {\n                let optionValue = option[this.props.searchFieldName].toLowerCase();\n\n                if(\n                    (\n                        (new RegExp('^' + searchString)).test(optionValue) // Regex search on whole list of partial match.\n                        ||\n                        (new RegExp('^.*' + searchString + '.*$')).test(optionValue)\n                    )\n                    // &&\n                    // !this.state.currentResultSet.some(item => item === option) // Excludes words already on the list.\n                    //^this line is still likely broken.\n                )\n                {\n                    return true\n                }\n            });\n        }      \n\n        this.setState({\n            suggestionList: suggestionList,\n            currentQueryValue: searchString\n        });\n    }\n\n    handleClick = (index : number) => {\n        const value = this.state.suggestionList[index].title;\n\n        this.setState({\n            suggestionList: [],\n            selected: -1,\n            currentQueryValue: value,\n        });\n\n        this.props.onQueryChange(value);\n    };\n\n    handleMouseOver = (index : number) => {\n        this.setState({\n            selected: index\n        });\n    };\n\n    handleKeyDown = (e : any) => {\n        if(e.key === 'Enter') {\n            let value = '';\n\n            if(this.state.selected !== -1) {\n                value = this.state.suggestionList[this.state.selected];\n            }\n            else {\n                value = this.state.currentQueryValue;\n            }\n            this.props.onQueryChange(value);\n\n            this.setState({\n                suggestionList: [],\n                selected: -1\n            });\n        }\n    };\n\n    clear() {\n        this.props.onQueryChange('');\n        this.setState({\n            currentQueryValue: '',\n            suggestionList: [],\n            selected: -1\n        });\n    }\n\n    formatSuggestionList(suggestionList : Array<any>) {\n        const list = suggestionList.map((item, index) => {\n            return (\n                <div\n                    key={ item[this.props.searchFieldName] }\n                    className={'suggestion-item ' + (index === this.state.selected ? 'selected' : '')}\n                    onClick={ () => this.handleClick(index) }\n                    onMouseEnter={ () => this.handleMouseOver(index) }\n                    \n                >\n                    { item[this.props.searchFieldName] }\n                </div>\n            )\n        });\n\n        return list;\n    }\n\n    render() {\n        if(this.state.suggestionList.length > 0) {\n            return (\n                <div className=\"search-container\">\n                    <input \n                        type=\"text\" \n                        onChange={ this.handleChange } \n                        value={ this.state.currentQueryValue } \n                        placeholder=\"Search...\"\n                        onKeyDown={ this.handleKeyDown }\n                    />\n                    <img src=\"cancel.svg\" alt=\"Clear Search\"/>\n                    <div className=\"suggestion-list\">\n                        { this.formatSuggestionList(this.state.suggestionList) }\n                    </div>\n                </div>\n            );\n        }\n        else {\n            return (\n                <div className=\"search-container\">\n                    <input \n                        type=\"text\" \n                        onChange={ this.handleChange } \n                        value={ this.state.currentQueryValue } \n                        placeholder=\"Search...\"\n                        onKeyDown={ this.handleKeyDown }\n                    />\n                    <img src=\"cancel.svg\" alt=\"Clear Search\" onClick={ this.clear }/>\n                </div>\n            );\n        }\n    };\n};","import * as React from \"react\";\nimport './Cart.scss';\nimport Dollar from './Dollar';\n\nexport interface CartProps { \n    items: Array<any>;\n    taxRate: number;\n    onRemoveFromCart: Function;\n}\n\nexport default class Cart extends React.Component<CartProps, {}> {   \n    constructor(props : CartProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    subtotalAmount(items : Array<any>) {\n        let subtotal = items.reduce((accum, item) => { return accum + item.price * item.quantity}, 0);\n\n        return subtotal;\n    }\n\n    renderLineItem(items : Array<any>) {\n        const lineItems = items.map((item) => {\n            return (\n                <tr key={ item.title }>\n                    <td>\n                        { item.title }\n                    </td>\n                    <td className=\"quantity\">\n                        { item.quantity }\n                    </td>\n                    <td>\n                        <Dollar value={ item.price }/>\n                    </td>\n                    <td onClick={ () => this.handleRemoveFromCart(item) } className=\"remove\">\n                        X\n                    </td>\n                </tr>\n            );\n        });\n\n        return lineItems;\n    };\n\n    subtotal(subtotal : number) {\n        return (\n            <tr>\n                <td>\n                    Subtotal\n                </td>\n                <td>\n                    <Dollar value={ subtotal }/>\n                </td>\n            </tr>\n        );\n    }\n\n    taxRate(rate : number) {\n        return (\n            <tr>\n                <td>Tax Rate</td>\n                <td>\n                    { rate * 100 }%\n                </td>\n            </tr>\n        );\n    };\n\n    taxAmount(rate : number, subtotal : number) {\n        return (\n            <tr>\n                <td>Tax Amount</td>\n                <td>\n                    <Dollar value={ rate * subtotal }/>\n                </td>\n            </tr>\n        );\n    };\n\n    totalAmount(rate : number, subtotal : number) {\n        return (\n            <tr>\n                <td><strong>Total</strong></td>\n                <td>\n                    <strong><Dollar value={ (rate * subtotal) + subtotal }/></strong>\n                </td>\n            </tr>            \n        );\n    };\n\n    handleRemoveFromCart(item : any) {\n        this.props.onRemoveFromCart(item);\n    }\n\n    render() {\n        return (\n            <div className=\"cart-container\">\n                <img src=\"shopping-cart.svg\" alt=\"Shopping Cart\"/>\n                <h3>Cart</h3>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Item</th>\n                            <th>Quantity</th>\n                            <th>Price</th>\n                            <th>Remove</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { this.renderLineItem(this.props.items ) }\n                    </tbody>\n                </table>\n                <table>\n                    <tbody>\n                        { this.subtotal(this.subtotalAmount(this.props.items)) }\n                        { this.taxRate(this.props.taxRate) }\n                        { this.taxAmount(this.props.taxRate, this.subtotalAmount(this.props.items)) }\n                        { this.totalAmount(this.props.taxRate, this.subtotalAmount(this.props.items)) }\n                    </tbody>\n                </table>\n            </div>\n        );\n    };\n};","import * as React from 'react';\nimport './App.scss';\nimport Product from './components/Product';\nimport Select from './components/Select';\nimport Search from './components/Search';\nimport Dollar from './components/Dollar';\nimport Cart from './components/Cart';\nimport categories from './categories.json';\nimport products from './products.json';\n\n// interface Product {\n//   title: string;\n//   price: number;\n//   quantity: number;\n// }\n\nexport interface AppState {\n  currentCategoryValue: string;\n  currentSortByValue: string;\n  currentSearchQueryValue: string;\n  categories: Array<any>;\n  products: Array<any>;\n  filteredProductList: Array<any>;\n  cartItems: Array<any>;\n};\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props : any) {\n    super(props);\n\n    this.updateCategoryFilter = this.updateCategoryFilter.bind(this);\n    this.handleChangeSortBy = this.handleChangeSortBy.bind(this);\n    this.getSubtotal = this.getSubtotal.bind(this);\n    this.getCartCount = this.getCartCount.bind(this);\n    this.state = {\n      currentCategoryValue: 'all',\n      currentSortByValue: 'name',\n      currentSearchQueryValue: '',\n      categories: categories,\n      products: products,\n      filteredProductList: [],\n      cartItems: [\n        // {\n        //   title: 'Bananas',\n        //   price: 0.99,\n        //   quantity: 3\n        // }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    this.updateFilteredProducts();\n  }\n\n  updateCategoryFilter(category : string) {\n    this.updateFilteredProducts(category);\n  };\n\n  handleChangeSortBy(sortBy : string) {\n    this.updateFilteredProducts(undefined, sortBy);\n  }\n\n  onCartUpdate(item : any) {\n    const existing = this.state.cartItems.find((i) => { \n      return i.title === item.title\n    });\n\n    let newCartItems = [];\n    \n    if(existing) {\n      existing.quantity = item.quantity;\n      newCartItems = this.state.cartItems.slice(0)\n    }\n    else {\n      // Add new item to cart.\n      const itemsClone =  this.state.cartItems.slice(0);\n      item.quantity = 1;\n\n      itemsClone.push(item);\n      newCartItems = itemsClone.slice(0);\n    }\n\n    this.updateFilteredProducts(undefined, undefined, undefined, newCartItems);    \n  };\n\n  onRemoveFromCart(item : any) {\n    const cartItems = this.state.cartItems.slice(0);\n    const existing = cartItems.slice(0).find(e => e.title === item.title);\n\n    if(existing) {\n      existing.quantity = 0;\n    }\n    \n    this.updateFilteredProducts(undefined, undefined, undefined, cartItems); \n  }\n\n  updateFilteredProducts(category? : string, sortBy? : string, query? : string, cartItems? : any[]) {\n    let filteredProductList = [] as any[];\n\n    // Apply Category.\n    category = category ? category : this.state.currentCategoryValue;\n    sortBy = sortBy ? sortBy : this.state.currentSortByValue;\n    \n    if(query === undefined) {\n      query = this.state.currentSearchQueryValue;\n    }\n    else {\n      query = query;\n    }\n\n    cartItems = cartItems ? cartItems : this.state.cartItems;\n\n    if(category !== 'all') {\n      filteredProductList = this.state.products.filter((product) => {\n        return product.category === category;\n      });\n    }\n    else {\n      filteredProductList = this.state.products.slice(0);\n    }\n\n    // Apply Sort by.\n    if(sortBy === 'name') {\n      filteredProductList = filteredProductList.sort((a, b) => {\n        if (a.title < b.title)\n          return -1;\n        if (a.title > b.title)\n          return 1;\n        return 0;\n      });\n    }\n    else if(sortBy === 'price') {\n      filteredProductList = filteredProductList.sort((a, b) => {\n        return a.price - b.price;\n      });\n    }\n\n    // Apply search query.\n    // new RegExp('^.\\w$').test(query)\n    if(query && query.length > 0) {\n      query = query!.toLowerCase();\n      filteredProductList = filteredProductList.filter((option) => {\n        const optionValue = option.title.toLowerCase();\n        \n        if(\n            (\n                (new RegExp('^' + query)).test(optionValue) // Regex search on whole list of partial match.\n                ||\n                (new RegExp('^.*' + query + '.*$')).test(optionValue)\n            )\n        )\n        {\n            return true\n        }\n      }, this);\n    }\n\n    // Match cartItems and filteredProduct list.\n    cartItems.forEach((item) => {\n      const element = filteredProductList.find(e => e.title === item.title);\n\n      if(element) {\n        element.quantity = item.quantity;\n      }\n    });\n    \n    // Remove empty elements from cart.\n    const newCartItems = cartItems.filter(item => item.quantity > 0);\n\n    this.setState({\n      filteredProductList: filteredProductList,\n      cartItems: newCartItems,\n      currentCategoryValue: category,\n      currentSortByValue: sortBy,\n      currentSearchQueryValue: query,\n    })\n  }\n\n  getSubtotal() {\n    const cartItems = this.state.cartItems;\n    let subtotal = 0;\n    \n    if(cartItems.length > 0) {\n      subtotal = cartItems.reduce((total, item) => total += item.price * item.quantity), 0;\n    }\n\n    return subtotal;\n  }\n\n  getCartCount() {\n    const cartItems = this.state.cartItems;\n    let cartCount = 0;\n    \n    if(cartItems.length > 0) {\n      cartCount = cartItems.reduce((total, item) => total += item.quantity, 0);\n    }\n\n    return cartCount;\n  }\n\n  onQueryChange(query : string) {\n    this.updateFilteredProducts(undefined, undefined, query)\n  }\n\n  // renderCart() {\n  //   return (\n\n  //   );\n  // }\n\n  render() {  \n    const filteredProductList = this.state.filteredProductList;\n\n    let productList = undefined;\n    \n    if(filteredProductList.length > 0) {\n      productList = filteredProductList.map((item) => {\n        return (\n          <Product\n            key={ item.title }\n            title={ item.title }\n            imageUrl={ 'thumbnails/' + item.url }\n            price={ item.price }\n            category={ item.category }\n            onCartUpdate={ (item : any) => this.onCartUpdate(item)}\n            quantity={ item.quantity }\n          />\n        )\n      });\n    }\n    else {\n      productList = React.createElement('div', {}, 'No Results');\n    }\n\n    return (\n      <div className=\"app\">\n        <div className=\"top-bar\">\n          <a href=\"/\">\n            <img src=\"logo_title.png\" alt=\"G6 Market\"/>\n          </a>\n          <div className=\"search\">\n            <Search \n              inputSet={ this.state.products }\n              searchFieldName={ 'title' }\n              minimumSearchLength={ 2 }\n              onQueryChange={ (query : string) => this.onQueryChange(query) }\n            />\n          </div>\n          <div className=\"top-subtotal-cart-count\">\n            <div><strong>Subtotal: </strong><Dollar value={ this.getSubtotal() }/></div>\n            <div><strong>Cart: </strong> { this.getCartCount() }</div>\n          </div>\n        </div>\n        <div className=\"filter-bar\">\n          <div>\n              <strong>Sort By:</strong>\n              <Select\n                currentValue={ this.state.currentSortByValue }\n                options={ [{value: 'name', label: 'Name' }, {value: 'price', label: 'Price'}] }\n                onSelectChange={ this.handleChangeSortBy }\n              />\n          </div>\n          <div>\n            <strong>Category:</strong>\n            <Select\n              currentValue={ this.state.currentCategoryValue }\n              options={ this.state.categories }\n              onSelectChange={ this.updateCategoryFilter }\n            />\n          </div>\n        </div>\n        <div className=\"body\">\n          <div className={'left ' + (this.state.cartItems.length === 0 ? 'full-left' : '')}>\n            <div className=\"products\">\n              { productList }\n            </div>\n          </div>\n          <div className={'right ' + (this.state.cartItems.length === 0 ? 'hidden-right' : '')}>\n            <Cart taxRate={ 0.05 } items={ this.state.cartItems } onRemoveFromCart={ (item : any) => this.onRemoveFromCart(item) }/>\n          </div>        \n        </div>\n      </div>\n    );\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}